name: Container Image CI
on: [push]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      GHCR: ghcr.io
      IMAGE_NAME: example-node-webapp
    steps:
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
    - name: Steps context
      run: echo "$STEPS_CONTEXT"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Upload compliance manifest
      uses: actions/upload-artifact@v2
      with:
        name: compliance-manifest-yaml
        path: compliance_manifest.yaml
        retention-days: 1

    - name: Scan current project directory with Grype
      id: scan_directory_grype
      uses: anchore/scan-action@v2
      with:
        path: "./"
        fail-build: true
        severity-cutoff: critical

    - name: upload grype directory scan report
      uses: actions/upload-artifact@v2
      with:
        name: grype-directory-vuln-report
        path: ${{ steps.scan_directory_grype.outputs.vulnerabilities }}
        retention-days: 1
    
    - name: Build image from Dockerfile
      id: build_image
      run: |
        chmod +x scripts/*
        mkdir -p artifacts
        ./scripts/image_labels.py
        ./scripts/build-image.sh

    - name: Scan built image with Grype
      id: scan_image_grype
      uses: anchore/scan-action@v2
      with:
        image: "localbuild/example-node-webapp:latest"
        fail-build: false
        severity-cutoff: critical
    
    - name: upload grype image scan report
      uses: actions/upload-artifact@v2
      with:
        name: grype-image-vuln-report
        path: ${{ steps.scan_image_grype.outputs.vulnerabilities }}
        retention-days: 1

    - name: Login to GitHub Container Registry
      id: ghcr_login
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Push image to GitHub Container Registry
      id: ghcr_push
      run: |
        docker push "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:latest"
        docker push "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:${GITHUB_SHA}"
    
    # - name: Scan pushed image with Anchore Enterprise
    #   id: anchore_enterprise_scan
    #   run: |
    #     pip install anchorecli
    #     anchore-cli --url ${{ secrets.ANCHORE_ENDPOINT }}--u ${{ secrets.ANCHORE_USERNAME }} --p ${{ secrets.ANCHORE_PASSWORD }} image add "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:${GITHUB_SHA}"
    #     anchore-cli --url ${{ secrets.ANCHORE_ENDPOINT }}--u ${{ secrets.ANCHORE_USERNAME }} --p ${{ secrets.ANCHORE_PASSWORD }} image wait "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:${GITHUB_SHA}"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Check out deployment code
      id: checkout_deployment_repo
      uses: actions/checkout@v2
      with:
        repository: 'valancej/compliance-deployment'
        token: ${{ secrets.REPO_PAT }}

    - name: Download compliance manifest from build job
      id: download_manifest
      uses: actions/download-artifact@v2
      with:
        name: compliance-manifest-yaml

    - name: Setup Kustomize
      id: setup_kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "3.6.1"

    - name: Update Kubernetes resources
      id: update_k8s
      run: |
        chmod +x scripts/*
        mkdir -p artifacts
        ./scripts/k8s-metadata.py
        ./scripts/update-k8s-resources.sh

    - name: Commit files
      id: commit_changes
      run: |
        git config --local user.name "valancej"
        git add .
        git commit -m "Image bump"
        git push

    - name: Build compliance manifest
      id: build_compliance_manifest
      run: ./scripts/compliance-manifest.py

    - name: Upload compliance manifest
      uses: actions/upload-artifact@v2
      with:
        name: compliance-manifest-json
        path: artifacts/compliance-manifest.json
        retention-days: 1

  report:
    name: Report
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Check out report code
      id: checkout_report_repo
      uses: actions/checkout@v2
      with:
        repository: 'valancej/compliance-reports'
        token: ${{ secrets.REPO_PAT }}
    
    - name: Create artifacts directory
      run: mkdir -p artifacts
    
    - name: Download all artifacts
      id: download_artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    
    - name: Display structure of downloaded artifacts
      run: ls -R

    # - name: Generate compliance report
    #   id: generate_compliance_report
    #   run: generate_reports.py