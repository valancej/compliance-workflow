name: Container Image CI
on: [push]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      GHCR: ghcr.io
      IMAGE_NAME: example-node-webapp
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Upload compliance manifest
      uses: actions/upload-artifact@v2
      with:
        name: compliance-manifest-yaml
        path: compliance_manifest.yaml
        retention-days: 1

    - name: Scan current project directory with Grype
      id: scan_directory_grype
      uses: anchore/scan-action@v2
      with:
        path: "./"
        fail-build: true
        severity-cutoff: critical

    - name: upload grype directory scan report
      uses: actions/upload-artifact@v2
      with:
        name: grype-directory-vuln-report
        path: ${{ steps.scan_directory_grype.outputs.vulnerabilities }}
        retention-days: 1

    - name: run report on grype directory scan
      id: compliance_report_directory_scan
      run: |
        chmod +x scripts/*
        mkdir -p artifacts
        ./scripts/build_reports.py --stage directory --number 1 --compliance cis --file ${{ steps.scan_directory_grype.outputs.vulnerabilities }}
    
    - name: Upload compliance report for grype directory scan
      uses: actions/upload-artifact@v2
      with:
        name: directory-compliance-report-json
        path: artifacts/directory-compliance-report.json
        retention-days: 1
    
    - name: Build image from Dockerfile
      id: build_image
      run: |
        ./scripts/image_labels.py
        ./scripts/build-image.sh

    - name: Scan built image with Grype
      id: scan_image_grype
      uses: anchore/scan-action@v2
      with:
        image: "localbuild/example-node-webapp:latest"
        fail-build: false
        severity-cutoff: critical
    
    - name: upload grype image scan report
      uses: actions/upload-artifact@v2
      with:
        name: grype-image-vuln-report
        path: ${{ steps.scan_image_grype.outputs.vulnerabilities }}
        retention-days: 1

    - name: run report on grype image scan
      id: compliance_report_image_scan
      run: ./scripts/build_reports.py --stage build --number 2 --compliance cis --file ${{ steps.scan_image_grype.outputs.vulnerabilities }}

    - name: Upload build report for grype image scan
      uses: actions/upload-artifact@v2
      with:
        name: build-compliance-report-json
        path: artifacts/build-compliance-report.json
        retention-days: 1

    - name: Login to GitHub Container Registry
      id: ghcr_login
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Push image to GitHub Container Registry
      id: ghcr_push
      run: |
        docker push "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:latest"
        docker push "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:${GITHUB_SHA}"
    
    - name: Scan pushed image with Anchore Enterprise
      id: anchore_enterprise_scan
      run: |
        pip install wheel
        pip install anchorecli
        export PATH="$HOME/.local/bin/:$PATH"
        anchore-cli --url ${{ secrets.ANCHORE_ENDPOINT }} --u ${{ secrets.ANCHORE_USERNAME }} --p ${{ secrets.ANCHORE_PASSWORD }} image add "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:${GITHUB_SHA}"
        anchore-cli --url ${{ secrets.ANCHORE_ENDPOINT }} --u ${{ secrets.ANCHORE_USERNAME }} --p ${{ secrets.ANCHORE_PASSWORD }} image wait "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:${GITHUB_SHA}"
        anchore-cli --json --url ${{ secrets.ANCHORE_ENDPOINT }} --u ${{ secrets.ANCHORE_USERNAME }} --p ${{ secrets.ANCHORE_PASSWORD }} evaluate check "ghcr.io/${GITHUB_ACTOR}/${IMAGE_NAME}:${GITHUB_SHA}" --detail > artifacts/anchore-compliance-report-detail.json || true
    
    - name: Upload anchore compliance report
      uses: actions/upload-artifact@v2
      with:
        name: anchore-compliance-report-detail
        path: artifacts/anchore-compliance-report-detail.json
        retention-days: 1

    - name: run build report report on anchore registry scan
      id: compliance_report_registry_scan
      run: ./scripts/build_reports.py --stage registry --number 3 --compliance cis --file artifacts/anchore-compliance-report-detail.json

    - name: Upload build report for anchore registry image scan
      uses: actions/upload-artifact@v2
      with:
        name: registry-compliance-report-json
        path: artifacts/registry-compliance-report.json
        retention-days: 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Check out deployment code
      id: checkout_deployment_repo
      uses: actions/checkout@v2
      with:
        repository: 'valancej/compliance-deployment'
        token: ${{ secrets.REPO_PAT }}

    - name: Download compliance manifest from build job
      id: download_report
      uses: actions/download-artifact@v2
      with:
        name: compliance-manifest-yaml

    - name: Setup Kustomize
      id: setup_kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "3.6.1"

    - name: Update Kubernetes resources
      id: update_k8s
      run: |
        chmod +x scripts/*
        mkdir -p artifacts
        ./scripts/k8s_metadata.py
        ./scripts/update-k8s-resources.sh
        
    - name: run kube bench    
      id: kube_bench
      uses: steebchen/kubectl@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: kubectl apply -f kustomize/base/tools/job-eks.yaml

    - name: Commit files
      id: commit_changes
      run: |
        git config --local user.name "valancej"
        git add .
        git commit -m "Image bump"
        git push

    - name: Build compliance report
      id: compliance_report_deploy
      run: ./scripts/build_reports.py --stage deploy --number 4 --compliance cis

    - name: Upload compliance report
      uses: actions/upload-artifact@v2
      with:
        name: deploy-compliance-report-json
        path: artifacts/deploy-compliance-report.json
        retention-days: 1

  report:
    name: Report
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Check out report code
      id: checkout_report_repo
      uses: actions/checkout@v2
      with:
        repository: 'valancej/compliance-reports'
        token: ${{ secrets.REPO_PAT }}
    
    - name: Create artifacts directory
      run: mkdir -p artifacts
    
    - name: Download directory artifact
      id: download_directory_artifact
      uses: actions/download-artifact@v2
      with:
        name: directory-compliance-report-json
        path: artifacts

    - name: Download build artifact
      id: download_build_artifact
      uses: actions/download-artifact@v2
      with:
        name: build-compliance-report-json
        path: artifacts
    
    - name: Download registry artifact
      id: download_registry_artifact
      uses: actions/download-artifact@v2
      with:
        name: registry-compliance-report-json
        path: artifacts
    
    - name: Download deploy artifact
      id: download_deploy_artifact
      uses: actions/download-artifact@v2
      with:
        name: deploy-compliance-report-json
        path: artifacts
    
    - name: Display structure of downloaded artifacts
      run: ls -R

    # - name: Generate compliance report
    #   id: generate_compliance_report
    #   run: generate_reports.py